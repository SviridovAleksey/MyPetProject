{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { InstructStepService } from 'app/services/InstructStepsService';\nimport { AppService } from '../app/app.service';\nlet HomeComponent = class HomeComponent {\n  constructor(_service, _shareInstStepServ) {\n    this._service = _service;\n    this._shareInstStepServ = _shareInstStepServ;\n    this.isLoggedIn = false;\n    this.tabs = [{\n      key: 'homePage',\n      value: true\n    }, {\n      key: 'fooPage',\n      value: false\n    }, {\n      key: 'instructionPage',\n      value: false\n    }, {\n      key: 'stepsPage',\n      value: false\n    }, {\n      key: 'createNewInstructions',\n      value: false\n    }];\n    this.singleInstruction = [];\n    this.messageText = [];\n  }\n\n  createNewInstruction(instructionInfo) {\n    let instInfo = instructionInfo;\n\n    if (instInfo.name == '') {\n      instInfo.name = \"New instruction\";\n    }\n\n    this.showNewStepViewer(instInfo);\n  }\n\n  ngOnInit() {\n    this.isLoggedIn = this._service.checkCredentials();\n    let i = window.location.href.indexOf('code');\n\n    if (!this.isLoggedIn && i != -1) {\n      this._service.retrieveToken(window.location.href.substring(i + 5));\n    }\n  }\n\n  login() {\n    window.location.href = 'http://localhost:8083/auth/realms/sviridov/protocol/openid-connect/auth?response_type=code&&scope=openid%20write%20read&client_id=' + this._service.clientId + '&redirect_uri=' + this._service.redirectUri;\n  }\n\n  logout() {\n    this._service.logout();\n  }\n\n  showTab(tab) {\n    for (var i = 0; i < this.tabs.length; i++) {\n      if (this.tabs[i].key == tab) {\n        if (this.tabs[i].key == 'instructionPage') {\n          this._shareInstStepServ.getInstructionsTrigger.next();\n        }\n\n        if (this.tabs[i].key == 'createNewInstructions') {\n          this._shareInstStepServ.clearNewInstructionFormTrigger.next();\n        }\n\n        this.tabs[i].value = true;\n      } else {\n        this.tabs[i].value = false;\n      }\n    }\n  }\n\n  openCloseNav() {\n    if (document.getElementById(\"mySidebar\").style.width == '250px') {\n      document.getElementById(\"mySidebar\").style.width = '0';\n    } else {\n      document.getElementById(\"mySidebar\").style.width = '250px';\n    }\n  }\n\n  closeStepViewer(i) {\n    this.singleInstruction.splice(i, 1);\n    this.showTab('instructionPage');\n  }\n\n  addNewStepViewer(instruct) {\n    this.addStepsViewer(instruct);\n    this.showTab('stepsPage');\n  }\n\n  addNewStepViewerWithoutChangePage(instruct) {\n    this.addStepsViewer(instruct);\n  }\n\n  addStepsViewer(instruct) {\n    if (!this.forEachStepViewer(instruct)) {\n      this.singleInstruction.unshift({\n        key: instruct,\n        value: true\n      });\n    }\n\n    if (this.singleInstruction.length > 5) {\n      this.singleInstruction.length = 5;\n    }\n  }\n\n  showNewStepViewer(instruct) {\n    this.forEachStepViewer(instruct);\n\n    this._shareInstStepServ.getStepsEventSubject.next(instruct.id);\n\n    this.showTab('stepsPage');\n  }\n\n  forEachStepViewer(instruct) {\n    let isExist = false;\n\n    for (var i = 0; i < this.singleInstruction.length; i++) {\n      if (this.singleInstruction[i].key.id == instruct.id) {\n        this.singleInstruction[i].key.name = instruct.name;\n        this.singleInstruction[i].value = true;\n        isExist = true;\n      }\n    }\n\n    return isExist;\n  }\n\n  closeNewStepViewer(name) {\n    for (var i = 0; i < this.singleInstruction.length; i++) {\n      if (this.singleInstruction[i].key.name == name) {\n        this.singleInstruction[i].value = false;\n      }\n    }\n  }\n\n  closeMessage(id) {\n    this.messageText.splice(id, 1);\n  }\n\n  showTextMessageErr(message) {\n    this.messageText.push({\n      text: message,\n      type: 'error'\n    });\n    this.hideMessage(this.messageText.findIndex(x => x.text === message));\n  }\n\n  showTextMessageSuccess(message) {\n    this.messageText.push({\n      text: message,\n      type: 'success'\n    });\n    this.hideMessage(this.messageText.findIndex(x => x.text === message));\n  }\n\n  showTextMessageMessage(message) {\n    this.messageText.push({\n      text: message,\n      type: 'message'\n    });\n    this.hideMessage(this.messageText.findIndex(x => x.text === message));\n  }\n\n  hideMessage(id) {\n    setTimeout(() => {\n      this.closeMessage(id);\n    }, 3000);\n  }\n\n};\nHomeComponent = __decorate([Component({\n  selector: 'home-header',\n  providers: [AppService],\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n}), __metadata(\"design:paramtypes\", [AppService, InstructStepService])], HomeComponent);\nexport { HomeComponent };","map":null,"metadata":{},"sourceType":"module"}