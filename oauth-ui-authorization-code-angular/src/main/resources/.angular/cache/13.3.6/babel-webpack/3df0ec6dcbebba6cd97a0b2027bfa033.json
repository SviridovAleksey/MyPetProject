{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AppService } from 'app/app/app.service';\nimport { HomeComponent } from 'app/home/home.component';\nimport { InstructionDTO, InstructStepService, LevelsDTO } from 'app/services/InstructStepsService';\nimport * as i0 from \"@angular/core\";\nexport let InnersInstLevStorage = /*#__PURE__*/(() => {\n  class InnersInstLevStorage {\n    constructor(level, instructions) {\n      this.level = level;\n      this.instructions = instructions;\n    }\n\n  }\n\n  InnersInstLevStorage.ɵfac = function InnersInstLevStorage_Factory(t) {\n    return new (t || InnersInstLevStorage)(i0.ɵɵinject(Array), i0.ɵɵinject(Array));\n  };\n\n  InnersInstLevStorage.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InnersInstLevStorage,\n    factory: InnersInstLevStorage.ɵfac\n  });\n  return InnersInstLevStorage;\n})();\nlet LevelsComponent = class LevelsComponent {\n  constructor(_service, _home, _shareInstStepServ) {\n    this._service = _service;\n    this._home = _home;\n    this._shareInstStepServ = _shareInstStepServ;\n    this.listInstructionsUrl = 'http://localhost:8089/instruction-server/api/v1/instructions';\n    this.instructions = [];\n    this.noSortInstructions = [];\n    this.prepareForDel = new InstructionDTO(null, 'UNKNOWN', 'UNKNOWN', null, null);\n    this.levelsUrl = 'http://localhost:8089/instruction-server/api/v1/levels';\n    this.levels = new Map();\n    this.showLevel = new Map();\n    this.historyShow = new Array();\n\n    this._shareInstStepServ.getInstructionsTrigger.subscribe(() => {\n      this.getInstructions();\n    });\n  }\n\n  ngOnInit() {\n    this.getInstructions();\n    this.createLevelForm();\n  }\n\n  clearAll() {\n    this.instructions.length = 0;\n    this.noSortInstructions.length = 0;\n    this.levels.clear();\n    this.showLevel.clear();\n    this.historyShow.length = 0;\n  }\n\n  createLevelForm() {\n    this.levelInfoForm = new FormGroup({\n      id: new FormControl(''),\n      name: new FormControl(''),\n      owner: new FormControl(''),\n      levelPlace: new FormControl('')\n    });\n  }\n\n  fillLevelForm(level) {\n    this.levelInfoForm.get(\"id\").setValue(level.id, {\n      emitEvent: true\n    });\n    this.levelInfoForm.get(\"name\").setValue(level.name, {\n      emitEvent: true\n    });\n    this.levelInfoForm.get(\"owner\").setValue(level.owner, {\n      emitEvent: true\n    });\n    this.levelInfoForm.get(\"levelPlace\").setValue(level.levelPlace, {\n      emitEvent: true\n    });\n  }\n\n  sortInstructions(inst) {\n    for (var i = 0; i < inst.length; i++) {\n      if (inst[i].levelOwner === 0) {\n        this.noSortInstructions.push(inst[i]);\n      } else {\n        this.instructions.push(inst[i]);\n      }\n    }\n\n    this.getLevels();\n  }\n\n  sortLevels(levels) {\n    let sortLevels = new Set();\n\n    for (var i = 0; i < levels.length; i++) {\n      sortLevels.add(levels[i].levelPlace);\n    }\n\n    for (let place of sortLevels) {\n      this.levels.set(place, this.getLevelsByPlace(place, levels));\n    }\n\n    this.setMainLevel(0);\n  }\n\n  getLevelsByPlace(place, levels) {\n    let retMap = new Map();\n\n    for (var i = 0; i < levels.length; i++) {\n      if (levels[i].levelPlace === place) {\n        retMap.set(levels[i], new InnersInstLevStorage(this.getSlaveLevels(levels[i], levels), this.getInstructionsByLevel(levels[i])));\n      }\n    }\n\n    return retMap;\n  }\n\n  getSlaveLevels(level, levels) {\n    let retArr = new Array();\n\n    for (var i = 0; i < levels.length; i++) {\n      if (level.id == levels[i].owner) {\n        retArr.push(levels[i]);\n      }\n    }\n\n    return retArr;\n  }\n\n  getInstructionsByLevel(level) {\n    let arrRet = new Array();\n\n    for (var i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].levelOwner == level.id) {\n        arrRet.push(this.instructions[i]);\n      }\n    }\n\n    return arrRet;\n  }\n\n  saveNewLevel(level) {\n    this.levels.get(level.levelPlace).set(level, new InnersInstLevStorage([], []));\n\n    if (level.levelPlace === 0) {\n      this.setMainLevel(0);\n    } else {\n      for (let lev of this.levels.get(level.levelPlace - 1).keys()) {\n        if (lev.id === level.owner) {\n          this.levels.get(level.levelPlace - 1).get(lev).level.push(level);\n        }\n      }\n\n      this.openLevel(level);\n    }\n  }\n\n  setMainLevel(levelNumber) {\n    this.showLevel.clear();\n\n    for (let level of this.levels.get(levelNumber).keys()) {\n      this.showLevel.set(level, this.levels.get(levelNumber).get(level));\n    }\n  }\n\n  openLevel(level) {\n    this.showLevel.clear();\n    this.showLevel.set(level, this.levels.get(level.levelPlace).get(level));\n    this.historyShow.push(level);\n  }\n\n  turnBackShowLevel() {\n    this.historyShow.length = this.historyShow.length - 1;\n\n    if (this.historyShow.length < 1) {\n      this.setMainLevel(0);\n    } else {\n      this.openLevel(this.historyShow[this.historyShow.length - 1]);\n      this.historyShow.length = this.historyShow.length - 1;\n    }\n  }\n\n  isHistoryExist() {\n    if (this.historyShow.length > 0) {\n      return true;\n    }\n  }\n\n  openRedactionInstruction(instruction) {\n    this._home.addNewStepViewerWithoutChangePage(instruction);\n\n    this._home.showTab('createNewInstructions');\n\n    this._shareInstStepServ.redactionInstructionTrigger.next(instruction);\n  }\n\n  deleteInstruction() {\n    document.getElementById(\"myModal\").style.display = \"none\";\n\n    this._service.delResource(this.listInstructionsUrl, this.prepareForDel.id).subscribe(() => {\n      this._home.showTextMessageSuccess(' delete the instruction \"' + this.prepareForDel.name) + '\"';\n    }, error => {\n      for (var i = 0; i < error.error.messages.length; i++) {\n        this._home.showTextMessageErr(error.error.messages[i]);\n      }\n    });\n  }\n\n  openDelInstructWindow(instruction) {\n    document.getElementById(\"myModalF\").style.display = \"block\";\n    this.prepareForDel = instruction;\n  }\n\n  addMainFolder() {\n    let newLevel = new LevelsDTO(0, 'New Folder', 0, 0);\n    this.putLevel(newLevel);\n  }\n\n  addFolder(level) {\n    let newLevel = new LevelsDTO(0, 'New Folder', level.id, level.levelPlace + 1);\n    this.putLevel(newLevel);\n  }\n\n  openRedactionLevelName(level) {\n    this.fillLevelForm(level);\n  }\n\n  addSteps(idOwner) {\n    this._home.showTab('createNewInstructions');\n\n    this._shareInstStepServ.newInstructionByLevel.next(idOwner);\n  }\n\n  showStepsInstruction(instruct) {\n    this._home.addNewStepViewer(instruct);\n\n    this._shareInstStepServ.getStepsEventSubject.next(instruct.id);\n  }\n\n  getInstructions() {\n    this.clearAll();\n\n    this._service.getResource(this.listInstructionsUrl).subscribe(data => this.sortInstructions(data), error => {\n      for (var i = 0; i < error.error.messages.length; i++) {\n        this._home.showTextMessageErr(error.error.messages[i]);\n      }\n    });\n  }\n\n  getLevels() {\n    this._service.getResource(this.levelsUrl).subscribe(data => this.sortLevels(data), error => {\n      for (var i = 0; i < error.error.messages.length; i++) {\n        this._home.showTextMessageErr(error.error.messages[i]);\n      }\n    });\n  }\n\n  putLevel(level) {\n    this._service.putResource(this.levelsUrl, level).subscribe(data => {\n      this.saveNewLevel(data);\n\n      this._home.showTextMessageSuccess('The folder \"' + data.name + '\" is successfully save');\n    }, error => {\n      for (var i = 0; i < error.error.messages.length; i++) {\n        this._home.showTextMessageErr(error.error.messages[i]);\n      }\n    });\n  }\n\n  activateRedactFolderName(i, j) {\n    if (document.getElementById(\"TextAreaFolder\" + i + j).hidden == true) {\n      document.getElementById(\"TextAreaFolder\" + i + j).hidden = false;\n      document.getElementById(\"nameFolder\" + i + j).hidden = true;\n    } else {\n      document.getElementById(\"TextAreaFolder\" + i + j).hidden = true;\n      document.getElementById(\"nameFolder\" + i + j).hidden = false;\n    }\n  }\n\n  openCloseCollaps(id) {\n    for (var i = 0; i < this.showLevel.size; i++) {\n      if (i !== id) {\n        document.getElementById(\"collaps\" + i).style.display = \"none\";\n      }\n    }\n\n    if (document.getElementById(\"collaps\" + id).style.display === \"block\") {\n      document.getElementById(\"collaps\" + id).style.display = \"none\";\n    } else {\n      document.getElementById(\"collaps\" + id).style.display = \"block\";\n    }\n  }\n\n  flipCardF(id) {\n    if (document.getElementById(\"flipInstF\" + id).style.transform == 'rotateY(180deg)') {\n      document.getElementById(\"flipInstF\" + id).style.transform = 'rotateY(0deg)';\n    } else {\n      document.getElementById(\"flipInstF\" + id).style.transform = 'rotateY(180deg)';\n    }\n  }\n\n  flipCardNoSort(id) {\n    if (document.getElementById(\"flipNoSort\" + id).style.transform == 'rotateY(180deg)') {\n      document.getElementById(\"flipNoSort\" + id).style.transform = 'rotateY(0deg)';\n    } else {\n      document.getElementById(\"flipNoSort\" + id).style.transform = 'rotateY(180deg)';\n    }\n  }\n\n};\nLevelsComponent = __decorate([Component({\n  selector: 'app-levels',\n  templateUrl: './levels.component.html',\n  styleUrls: ['./levels.component.css']\n}), __metadata(\"design:paramtypes\", [AppService, HomeComponent, InstructStepService])], LevelsComponent);\nexport { LevelsComponent };","map":null,"metadata":{},"sourceType":"module"}